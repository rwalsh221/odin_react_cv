[{"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/index.js":"1","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/App.js":"2","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/containers/Layout/Layout.js":"3","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/HeaderNavigation/HeaderNavigation.js":"4","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInput.js":"5","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/UI/Button/Button.js":"6","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInputs/CVInputs.js":"7","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInputs/SavedCvInputs/SavedCvInputs.js":"8","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInputsPersonal/CVInputsPersonal.js":"9"},{"size":410,"mtime":1611729323687,"results":"10","hashOfConfig":"11"},{"size":246,"mtime":1611730978637,"results":"12","hashOfConfig":"11"},{"size":327,"mtime":1612537210806,"results":"13","hashOfConfig":"11"},{"size":269,"mtime":1611733256634,"results":"14","hashOfConfig":"11"},{"size":1560,"mtime":1612944313055,"results":"15","hashOfConfig":"11"},{"size":379,"mtime":1612799633497,"results":"16","hashOfConfig":"11"},{"size":7183,"mtime":1612872467424,"results":"17","hashOfConfig":"11"},{"size":871,"mtime":1612803309885,"results":"18","hashOfConfig":"11"},{"size":1931,"mtime":1612534902630,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ud8z9z",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/index.js",[],["41","42"],"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/App.js",[],"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/containers/Layout/Layout.js",[],"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/HeaderNavigation/HeaderNavigation.js",[],"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInput.js",[],"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/UI/Button/Button.js",[],"/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInputs/CVInputs.js",["43","44","45"],"import React, { useState, useEffect } from 'react';\n\nimport Button from '../../UI/Button/Button';\nimport SavedCvInput from './SavedCvInputs/SavedCvInputs';\nimport classes from './CVInputs.module.css';\n\n// TODO: REFACTOR ADD UTILITIES\n\nconst CvInputs = (props) => {\n  let content;\n\n  // STATE\n  const [inputStore, setInputStore] = useState({\n    storeName: props.storeName,\n    data: {},\n  });\n\n  const [savedStore, setSavedStore] = useState([]);\n\n  const [editSaved, setEditSaved] = useState({ edit: false });\n\n  const [editStore, setEditStore] = useState({\n    title: '',\n    location: '',\n    qualification: '',\n    description: '',\n    id: '',\n  });\n\n  const inputStoreHandler = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n    setInputStore({\n      ...inputStore,\n      data: { ...inputStore.data, [name]: value },\n    });\n  };\n\n  const savedStoreHandler = () => {\n    const copyInputStoreObj = { ...inputStore.data, id: new Date().getTime() };\n    const copySavedStoreArr = savedStore.map((val) => val);\n\n    const newSavedStore = [...copySavedStoreArr, copyInputStoreObj];\n\n    setSavedStore(newSavedStore);\n  };\n\n  // TODO: NEED TO TRIGGER ONCHANGE EVENT TO STORE VALUE PROP.\n\n  const renderInputHandler = (inputForm, inputName) => {\n    console.log('RENDER', editStore);\n    console.log(editStore[1]);\n    content = inputForm.map((element, index) => {\n      console.log(element.title.toLowerCase());\n      let mutatedit = { ...editStore };\n      let test = mutatedit[Object.keys(mutatedit)[index]];\n      console.log(test, '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n\n      let content = (\n        <input\n          type={element.type}\n          name={inputName[index]}\n          value={test}\n          onChange={(event) => setEditHandler(event)}\n        ></input>\n      );\n      console.log(\n        'RENDERRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR'\n      );\n      return (\n        <li key={element.title} className={classes.cvInputs__subContent}>\n          <h4 className={classes.cvInputs__inputHeading}>{element.title}:</h4>\n          {content}\n        </li>\n      );\n    });\n  };\n\n  // gets saved input to be edited\n  const getEditHandler = (e) => {\n    setEditSaved({ edit: true });\n    let newArr = [...savedStore];\n    console.log(newArr);\n    let newIndexedArr = newArr.map((el) => {\n      return el.id;\n    });\n    console.log(newIndexedArr);\n    console.log(e.target.id);\n    let saved = newArr[newIndexedArr.indexOf(e.target.id * 1)];\n    console.log(saved);\n    setEditStore(saved);\n  };\n\n  const setEditHandler = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n    setEditStore({\n      ...editStore,\n      [name]: value,\n    });\n  };\n\n  // useEffect(() => {\n  //   let savedInputContent = savedStore.map((el) => (\n  //     <SavedCvInput title={el.title} place={el.location} />\n  //   ));\n\n  //   return savedInputContent;\n  // }, [savedStore]);\n\n  const renderSavedCvInputHandler = (arr) => {\n    let savedInputContent = arr.map((el) => (\n      <SavedCvInput\n        title={el.title}\n        place={el.location}\n        id={el.id}\n        key={el.id}\n        click={(e) => getEditHandler(e)}\n      />\n    ));\n\n    return savedInputContent;\n  };\n\n  renderInputHandler(props.inputForm, props.inputName, props.storeName);\n\n  // let form;\n\n  // if (props.type === 'employment') {\n  //   form = (\n  //     <form className={''}>\n  //       <ul className={classes.cvInputs__content}>\n  //         <li key={props.inputTitle} className={classes.cvInputs__subContent}>\n  //           <h4 className={classes.cvInputs__inputHeading}>\n  //             {props.inputTitle}:\n  //           </h4>\n  //           <input\n  //             type={'text'}\n  //             name={props.inputName[index]}\n  //             onChange={(event) => inputStoreHandler(event)}\n  //           ></input>\n  //         </li>\n  //       </ul>\n  //     </form>\n  //   );\n  // }\n\n  return (\n    <React.Fragment>\n      <div className={`${classes.cvInputs}`}>\n        <h3 className={classes.cvInputs__heading}>{props.heading}</h3>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            let newData = {};\n            for (let i = 0; i < e.target.length; i++) {\n              if (e.target[i].tagName === 'INPUT') {\n                let name = e.target[i].name;\n                let value = e.target[i].value;\n                newData = { ...newData, [name]: value };\n                // e.target[i].value = '';\n              }\n            }\n\n            // newData = { ...newData, id: new Date().getTime() };\n            // setInputStore({\n            //   ...inputStore,\n            //   data: { ...newData },\n            // });\n\n            if (editSaved.edit) {\n              console.log('IFFFF EDDDITTT');\n              let inputId = editStore.id;\n              let newArr = [...savedStore];\n              console.log(newArr);\n              let newIndexedArr = newArr.map((el) => {\n                return el.id;\n              });\n              console.log(newIndexedArr);\n              console.log(e.target.id);\n              let saved = newIndexedArr.indexOf(inputId * 1);\n              console.log(\n                saved,\n                '*************************************************'\n              );\n              newArr.splice(saved, 1, editStore);\n              console.log(\n                newArr,\n                '********/***************/**************************'\n              );\n              // newData = { ...newArr };\n              console.log(newData, '54655456456******************************');\n              setSavedStore([...newArr]);\n            } else {\n              newData = { ...newData, id: new Date().getTime() };\n              setSavedStore([...savedStore, newData]);\n            }\n\n            // setSavedStore([...savedStore, newData]);\n            setEditStore({\n              title: '',\n              location: '',\n              qualification: '',\n              description: '',\n              id: '',\n            });\n\n            setEditSaved({ edit: false });\n            // savedStoreHandler();\n          }}\n        >\n          <ul className={classes.cvInputs__content}>{content}</ul>\n          <Button\n            btnType={'btnAdd'}\n            btnLabel={'ADD'}\n            // click={savedStoreHandler}\n          ></Button>\n        </form>\n      </div>\n      <div className={classes.cvInputs__saved}>\n        <h3\n          className={classes.cvInputs__heading}\n        >{`Saved ${props.heading}`}</h3>\n        {renderSavedCvInputHandler(savedStore)}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CvInputs;\n\n/* <form\nonSubmit={(e) => {\n  e.preventDefault();\n  let target = e.target;\n  console.log(target.length);\n  let testArr = [];\n  for (let i = 0; i < target.length - 1; i++) {\n    testArr.push(e.target[i].value);\n    e.preventDefault();\n  }\n  console.log(e.target[3].value);\n  console.log(testArr);\n}}\n>\n<ul className={classes.cvInputs__content}>{content}</ul>\n<Button\n  btnType={'btnAdd'}\n  btnLabel={personalSubmit.textContent}\n  btnSaved={personalSubmit.clicked}\n  click={(e) => personalSubmitHandler(e)}\n></Button>\n</form> */\n","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInputs/SavedCvInputs/SavedCvInputs.js",["46"],"import React, { useState } from 'react';\n\nimport Button from '../../../UI/Button/Button';\nimport classes from './SavedCvInputs.module.css';\n\nconst SavedCvInput = (props) => {\n  const [edit, setEdit] = useState({ style: '', content: 'EDIT' });\n\n  const editHandler = () => {\n    if (edit.style === '') {\n      setEdit({ style: '#5f2114', content: 'DEL' });\n    } else {\n      setEdit({ style: '', content: 'EDIT' });\n    }\n  };\n\n  return (\n    <div className={classes.savedCvInput} id={props.id}>\n      <div\n        style={{ backgroundColor: edit.style }}\n        className={classes.savedCvInput__content}\n      >\n        <h4>{props.title} </h4>\n        <h4>{props.place}</h4>\n      </div>\n      <Button\n        btnType={'btnEdit'}\n        btnLabel={edit.content}\n        click={props.click}\n        id={props.id}\n      />\n    </div>\n  );\n};\n\nexport default SavedCvInput;\n","/home/ricardo/web_projects/odin_on_rails/odin_react_cv/odin_cv/src/components/CVInput/CVInputsPersonal/CVInputsPersonal.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":27,"nodeType":"53","messageId":"54","endLine":1,"endColumn":36},{"ruleId":"51","severity":1,"message":"55","line":30,"column":9,"nodeType":"53","messageId":"54","endLine":30,"endColumn":26},{"ruleId":"51","severity":1,"message":"56","line":39,"column":9,"nodeType":"53","messageId":"54","endLine":39,"endColumn":26},{"ruleId":"51","severity":1,"message":"57","line":9,"column":9,"nodeType":"53","messageId":"54","endLine":9,"endColumn":20},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'inputStoreHandler' is assigned a value but never used.","'savedStoreHandler' is assigned a value but never used.","'editHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]